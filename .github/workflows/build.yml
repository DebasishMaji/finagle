# twitter/finagle sbt build/test with coverage
name: sbt-build

env:
  JAVA_OPTS: "-Dsbt.log.noformat=true"
  SKIP_FLAKY_TRAVIS: "true"
defaults:
  run:
    shell: bash
on:
  push:
    branches: [ ccoco/WorkflowBuild ]

jobs:
  dodo-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - uses: olafurpg/setup-scala@v7
        with:
          java-version: 1.8
      - name: cache/dodo
        uses: actions/cache@v1
        with:
          path: ~/.dodo
          key: ${{ runner.os }}-dodo-
      - name: dodo
        uses: cacoco/dodo-build@v1
        with:
          project: scrooge
      - name: cache/maven
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: cache/ivy2-cache
        uses: actions/cache@v1
        with:
          path: ~/.ivy2/cache
          key: ${{ runner.os }}-sbt-ivy-cache-
      - name: cache/ivy2-local
        uses: actions/cache@v1
        with:
          path: ~/.ivy2/local/com.twitter
          key: ${{ runner.os }}-sbt-ivy-local-
  test-1:
    needs: dodo-build
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.use_netty }}
    strategy:
      fail-fast: false
      matrix:
        project: [finagle-base-http, finagle-benchmark, finagle-benchmark-thrift, finagle-core, finagle-example]
        java: [openjdk@1.8, openjdk@1.11]
        # we don't run the 2.11.x series with finagle because the build matrix becomes too large.
        scala: [2.12.8, 2.13.1]
        use_netty: [true, false]
        coverage: [false]
        include:
          - java: openjdk@1.8
            scala: 2.12.8
            coverage: true
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - uses: olafurpg/setup-scala@v7
        with:
          java-version: ${{ matrix.java }}
      - name: cache/maven
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: cache/ivy2-cache
        uses: actions/cache@v1
        with:
          path: ~/.ivy2/cache
          key: ${{ runner.os }}-${{ github.repository }}-${{ github.ref }}-sbt-ivy-cache-
      - name: cache/ivy2-local
        uses: actions/cache@v1
        with:
          path: ~/.ivy2/local/com.twitter
          key: ${{ runner.os }}-${{ github.repository }}-${{ github.ref }}-sbt-ivy-local-
      - name: cache/sbt
        uses: actions/cache@v1
        with:
          path: ~/.sbt
          key: ${{ runner.os }}-${{ matrix.java }}-sbt-${{ hashFiles('**/build.sbt') }}
      # we don't test these projects because they require a running memcached instance
      - name: compile/finagle-memached
        run: |
          ./sbt ++${{ matrix.scala }} finagle-memcached/test:compile
      - name: netty/setup
        if: ${{ matrix.use_netty == 'true' }}
        run: |
          source ./netty-snapshot-env.sh true
      - name: test
        if: ${{ matrix.coverage == 'false' }}
        run: |
          ./sbt ++${{ matrix.scala }} clean "${{ matrix.project }}/test"
      - name: test/with-coverage
          if: ${{ matrix.coverage == 'true' }}
          run: |
            ./sbt ++${{ matrix.scala }} clean coverage "${{ matrix.project }}/test" coverageReport
      - name: test/coverage-report/generate
        if: ${{ matrix.coverage == 'true' }}
        run: |
          ./sbt ++${{ matrix.scala }} coverageAggregate
      - name: test/coverage-report/upload
        if: ${{ matrix.coverage == 'true' && success() }}
        uses: codecov/codecov-action@v1
      - name: test/coverage-report/save-results
        if: ${{ matrix.coverage }}
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report-1
          path: ./**/target/scala-2.12/*-report/*.xml
  test-2:
    needs: test-1
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.use_netty }}
    strategy:
      fail-fast: false
      matrix:
        project: [finagle-exception, finagle-exp, finagle-grpc-context, finagle-http, finagle-http2]
        java: [openjdk@1.8, openjdk@1.11]
        # we don't run the 2.11.x series with finagle because the build matrix becomes too large.
        scala: [2.12.8, 2.13.1]
        use_netty: [true, false]
        coverage: [false]
        include:
          - java: openjdk@1.8
            scala: 2.12.8
            coverage: true
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - uses: olafurpg/setup-scala@v7
        with:
          java-version: ${{ matrix.java }}
      - name: cache/maven
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: cache/ivy2-cache
        uses: actions/cache@v1
        with:
          path: ~/.ivy2/cache
          key: ${{ runner.os }}-${{ github.repository }}-${{ github.ref }}-sbt-ivy-cache-
      - name: cache/ivy2-local
        uses: actions/cache@v1
        with:
          path: ~/.ivy2/local/com.twitter
          key: ${{ runner.os }}-${{ github.repository }}-${{ github.ref }}-sbt-ivy-local-
      - name: cache/sbt
        uses: actions/cache@v1
        with:
          path: ~/.sbt
          key: ${{ runner.os }}-${{ matrix.java }}-sbt-${{ hashFiles('**/build.sbt') }}
      # we don't test these projects because they require a running memcached instance
      - name: compile/finagle-memached
        run: |
          ./sbt ++${{ matrix.scala }} finagle-memcached/test:compile
      - name: netty/setup
        if: ${{ matrix.use_netty == 'true' }}
        run: |
          source ./netty-snapshot-env.sh true
      - name: test
        if: ${{ matrix.coverage == 'false' }}
        run: |
          ./sbt ++${{ matrix.scala }} clean "${{ matrix.project }}/test"
      - name: test/with-coverage
          if: ${{ matrix.coverage == 'true' }}
          run: |
            ./sbt ++${{ matrix.scala }} clean coverage "${{ matrix.project }}/test" coverageReport
      - name: test/coverage-report/generate
        if: ${{ matrix.coverage == 'true' }}
        run: |
          ./sbt ++${{ matrix.scala }} coverageAggregate
      - name: test/coverage-report/upload
        if: ${{ matrix.coverage == 'true' && success() }}
        uses: codecov/codecov-action@v1
      - name: test/coverage-report/save-results
        if: ${{ matrix.coverage }}
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report-2
          path: ./**/target/scala-2.12/*-report/*.xml
  test-3:
    needs: test-2
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.use_netty }}
    strategy:
      fail-fast: false
      matrix:
        project: [finagle-init, finagle-integration, finagle-memcached, finagle-mux, finagle-mysql]
        java: [openjdk@1.8, openjdk@1.11]
        # we don't run the 2.11.x series with finagle because the build matrix becomes too large.
        scala: [2.12.8, 2.13.1]
        use_netty: [true, false]
        coverage: [false]
        include:
          - java: openjdk@1.8
            scala: 2.12.8
            coverage: true
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - uses: olafurpg/setup-scala@v7
        with:
          java-version: ${{ matrix.java }}
      - name: cache/maven
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: cache/ivy2-cache
        uses: actions/cache@v1
        with:
          path: ~/.ivy2/cache
          key: ${{ runner.os }}-${{ github.repository }}-${{ github.ref }}-sbt-ivy-cache-
      - name: cache/ivy2-local
        uses: actions/cache@v1
        with:
          path: ~/.ivy2/local/com.twitter
          key: ${{ runner.os }}-${{ github.repository }}-${{ github.ref }}-sbt-ivy-local-
      - name: cache/sbt
        uses: actions/cache@v1
        with:
          path: ~/.sbt
          key: ${{ runner.os }}-${{ matrix.java }}-sbt-${{ hashFiles('**/build.sbt') }}
      # we don't test these projects because they require a running memcached instance
      - name: compile/finagle-memached
        run: |
          ./sbt ++${{ matrix.scala }} finagle-memcached/test:compile
      - name: netty/setup
        if: ${{ matrix.use_netty == 'true' }}
        run: |
          source ./netty-snapshot-env.sh true
      - name: test
        if: ${{ matrix.coverage == 'false' }}
        run: |
          ./sbt ++${{ matrix.scala }} clean "${{ matrix.project }}/test"
      - name: test/with-coverage
          if: ${{ matrix.coverage == 'true' }}
          run: |
            ./sbt ++${{ matrix.scala }} clean coverage "${{ matrix.project }}/test" coverageReport
      - name: test/coverage-report/generate
        if: ${{ matrix.coverage == 'true' }}
        run: |
          ./sbt ++${{ matrix.scala }} coverageAggregate
      - name: test/coverage-report/upload
        if: ${{ matrix.coverage == 'true' && success() }}
        uses: codecov/codecov-action@v1
      - name: test/coverage-report/save-results
        if: ${{ matrix.coverage }}
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report-3
          path: ./**/target/scala-2.12/*-report/*.xml
  test-4:
    needs: test-3
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.use_netty }}
    strategy:
      fail-fast: false
      matrix:
        project: [finagle-netty4, finagle-netty4-http, finagle-opencensus-tracing, finagle-partitioning, finagle-redis]
        java: [openjdk@1.8, openjdk@1.11]
        # we don't run the 2.11.x series with finagle because the build matrix becomes too large.
        scala: [2.12.8, 2.13.1]
        use_netty: [true, false]
        coverage: [false]
        include:
          - java: openjdk@1.8
            scala: 2.12.8
            coverage: true
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - uses: olafurpg/setup-scala@v7
        with:
          java-version: ${{ matrix.java }}
      - name: cache/maven
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: cache/ivy2-cache
        uses: actions/cache@v1
        with:
          path: ~/.ivy2/cache
          key: ${{ runner.os }}-${{ github.repository }}-${{ github.ref }}-sbt-ivy-cache-
      - name: cache/ivy2-local
        uses: actions/cache@v1
        with:
          path: ~/.ivy2/local/com.twitter
          key: ${{ runner.os }}-${{ github.repository }}-${{ github.ref }}-sbt-ivy-local-
      - name: cache/sbt
        uses: actions/cache@v1
        with:
          path: ~/.sbt
          key: ${{ runner.os }}-${{ matrix.java }}-sbt-${{ hashFiles('**/build.sbt') }}
      # we don't test these projects because they require a running memcached instance
      - name: compile/finagle-memached
        run: |
          ./sbt ++${{ matrix.scala }} finagle-memcached/test:compile
      - name: netty/setup
        if: ${{ matrix.use_netty == 'true' }}
        run: |
          source ./netty-snapshot-env.sh true
      - name: test
        if: ${{ matrix.coverage == 'false' }}
        run: |
          ./sbt ++${{ matrix.scala }} clean "${{ matrix.project }}/test"
      - name: test/with-coverage
          if: ${{ matrix.coverage == 'true' }}
          run: |
            ./sbt ++${{ matrix.scala }} clean coverage "${{ matrix.project }}/test" coverageReport
      - name: test/coverage-report/generate
        if: ${{ matrix.coverage == 'true' }}
        run: |
          ./sbt ++${{ matrix.scala }} coverageAggregate
      - name: test/coverage-report/upload
        if: ${{ matrix.coverage == 'true' && success() }}
        uses: codecov/codecov-action@v1
      - name: test/coverage-report/save-results
        if: ${{ matrix.coverage }}
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report-4
          path: ./**/target/scala-2.12/*-report/*.xml
  test-5:
    needs: test-4
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.use_netty }}
    strategy:
      fail-fast: false
      matrix:
        project: [finagle-serversets, finagle-stats, finagle-stats-core, finagle-thrift, finagle-thriftmux]
        java: [openjdk@1.8, openjdk@1.11]
        # we don't run the 2.11.x series with finagle because the build matrix becomes too large.
        scala: [2.12.8, 2.13.1]
        use_netty: [true, false]
        coverage: [false]
        include:
          - java: openjdk@1.8
            scala: 2.12.8
            coverage: true
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - uses: olafurpg/setup-scala@v7
        with:
          java-version: ${{ matrix.java }}
      - name: cache/maven
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: cache/ivy2-cache
        uses: actions/cache@v1
        with:
          path: ~/.ivy2/cache
          key: ${{ runner.os }}-${{ github.repository }}-${{ github.ref }}-sbt-ivy-cache-
      - name: cache/ivy2-local
        uses: actions/cache@v1
        with:
          path: ~/.ivy2/local/com.twitter
          key: ${{ runner.os }}-${{ github.repository }}-${{ github.ref }}-sbt-ivy-local-
      - name: cache/sbt
        uses: actions/cache@v1
        with:
          path: ~/.sbt
          key: ${{ runner.os }}-${{ matrix.java }}-sbt-${{ hashFiles('**/build.sbt') }}
      # we don't test these projects because they require a running memcached instance
      - name: compile/finagle-memached
        run: |
          ./sbt ++${{ matrix.scala }} finagle-memcached/test:compile
      - name: netty/setup
        if: ${{ matrix.use_netty == 'true' }}
        run: |
          source ./netty-snapshot-env.sh true
      - name: test
        if: ${{ matrix.coverage == 'false' }}
        run: |
          ./sbt ++${{ matrix.scala }} clean "${{ matrix.project }}/test"
      - name: test/with-coverage
          if: ${{ matrix.coverage == 'true' }}
          run: |
            ./sbt ++${{ matrix.scala }} clean coverage "${{ matrix.project }}/test" coverageReport
      - name: test/coverage-report/generate
        if: ${{ matrix.coverage == 'true' }}
        run: |
          ./sbt ++${{ matrix.scala }} coverageAggregate
      - name: test/coverage-report/upload
        if: ${{ matrix.coverage == 'true' && success() }}
        uses: codecov/codecov-action@v1
      - name: test/coverage-report/save-results
        if: ${{ matrix.coverage }}
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report-5
          path: ./**/target/scala-2.12/*-report/*.xml
  test-6:
    needs: test-5
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.use_netty }}
    strategy:
      fail-fast: false
      matrix:
        project: [finagle-toggle, finagle-tunable, finagle-zipkin-core, finagle-zipkin-scribe]
        java: [openjdk@1.8, openjdk@1.11]
        # we don't run the 2.11.x series with finagle because the build matrix becomes too large.
        scala: [2.12.8, 2.13.1]
        use_netty: [true, false]
        coverage: [false]
        include:
          - java: openjdk@1.8
            scala: 2.12.8
            coverage: true
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - uses: olafurpg/setup-scala@v7
        with:
          java-version: ${{ matrix.java }}
      - name: cache/maven
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: cache/ivy2-cache
        uses: actions/cache@v1
        with:
          path: ~/.ivy2/cache
          key: ${{ runner.os }}-${{ github.repository }}-${{ github.ref }}-sbt-ivy-cache-
      - name: cache/ivy2-local
        uses: actions/cache@v1
        with:
          path: ~/.ivy2/local/com.twitter
          key: ${{ runner.os }}-${{ github.repository }}-${{ github.ref }}-sbt-ivy-local-
      - name: cache/sbt
        uses: actions/cache@v1
        with:
          path: ~/.sbt
          key: ${{ runner.os }}-${{ matrix.java }}-sbt-${{ hashFiles('**/build.sbt') }}
      # we don't test these projects because they require a running memcached instance
      - name: compile/finagle-memached
        run: |
          ./sbt ++${{ matrix.scala }} finagle-memcached/test:compile
      - name: netty/setup
        if: ${{ matrix.use_netty == 'true' }}
        run: |
          source ./netty-snapshot-env.sh true
      - name: test
        if: ${{ matrix.coverage == 'false' }}
        run: |
          ./sbt ++${{ matrix.scala }} clean "${{ matrix.project }}/test"
      - name: test/with-coverage
          if: ${{ matrix.coverage == 'true' }}
          run: |
            ./sbt ++${{ matrix.scala }} clean coverage "${{ matrix.project }}/test" coverageReport
      - name: test/coverage-report/generate
        if: ${{ matrix.coverage == 'true' }}
        run: |
          ./sbt ++${{ matrix.scala }} coverageAggregate
      - name: test/coverage-report/upload
        if: ${{ matrix.coverage == 'true' && success() }}
        uses: codecov/codecov-action@v1
      - name: test/coverage-report/save-results
        if: ${{ matrix.coverage }}
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report-6
          path: ./**/target/scala-2.12/*-report/*.xml
  coverage:
    runs-on: ubuntu-latest
    needs: test-6
    steps:
      - name: test/coverage-report/download-1
        uses: actions/download-artifact@v1
        with:
          name: coverage-report-1
          path: ${{ github.workspace }}/coverage-reports
      - name: test/coverage-report/download-2
        uses: actions/download-artifact@v1
        with:
          name: coverage-report-2
          path: ${{ github.workspace }}/coverage-reports
      - name: test/coverage-report/download-3
        uses: actions/download-artifact@v1
        with:
          name: coverage-report-3
          path: ${{ github.workspace }}/coverage-reports
      - name: test/coverage-report/download-4
        uses: actions/download-artifact@v1
        with:
          name: coverage-report-4
          path: ${{ github.workspace }}/coverage-reports
      - name: test/coverage-report/download-5
        uses: actions/download-artifact@v1
        with:
          name: coverage-report-5
          path: ${{ github.workspace }}/coverage-reports
      - name: test/coverage-report/download-6
        uses: actions/download-artifact@v1
        with:
          name: coverage-report-6
          path: ${{ github.workspace }}/coverage-reports
      - name: test/coverage-report/upload
        if: ${{ matrix.coverage == 'true' && success() }}
        uses: codecov/codecov-action@v1
        with:
          file: ${{ github.workspace }}/coverage-reports
